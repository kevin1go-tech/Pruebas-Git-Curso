# -*- coding: utf-8 -*-
"""Ejercicio de implementacion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s0eTnHwQPgj0XYoZUO7g2bkYqHgSZrBt

#Problema

Diseña un programa en Python que implemente cuatro estructuras de datos básicas: Lista Enlazada, Cola, Pila, y Árbol Binario. Cada estructura debe permitir:

* Insertar elementos.
* Eliminar elementos.
* Mostrar los elementos almacenados.

Escribe un menú que permita al usuario interactuar con cada estructura.
"""

class Nodo:
    def __init__(self, valor):
        self.valor = valor
        self.siguiente = None


# Lista enlazada
class ListaEnlazada:
    def __init__(self):
        self.cabeza = None

    def insertar(self, valor):
        nuevo_nodo = Nodo(valor)
        if not self.cabeza:
            self.cabeza = nuevo_nodo
        else:
            actual = self.cabeza
            while actual.siguiente:
                actual = actual.siguiente
            actual.siguiente = nuevo_nodo

    def eliminar(self, valor):
        if not self.cabeza:
            print("Lista vacía.")
            return
        if self.cabeza.valor == valor:
            self.cabeza = self.cabeza.siguiente
            return
        actual = self.cabeza
        while actual.siguiente and actual.siguiente.valor != valor:
            actual = actual.siguiente
        if actual.siguiente:
            actual.siguiente = actual.siguiente.siguiente
        else:
            print("Valor no encontrado.")

    def mostrar(self):
        actual = self.cabeza
        while actual:
            print(actual.valor, end=" -> ")
            actual = actual.siguiente
        print("None")


# Cola
class Cola:
    def __init__(self):
        self.items = []

    def insertar(self, valor):
        self.items.append(valor)

    def eliminar(self):
        if self.items:
            return self.items.pop(0)
        print("Cola vacía.")

    def mostrar(self):
        print(" <- ".join(map(str, self.items)))


# Pila
class Pila:
    def __init__(self):
        self.items = []

    def insertar(self, valor):
        self.items.append(valor)

    def eliminar(self):
        if self.items:
            return self.items.pop()
        print("Pila vacía.")

    def mostrar(self):
        print(" -> ".join(map(str, reversed(self.items))))


# Árbol Binario
class NodoArbol:
    def __init__(self, valor):
        self.valor = valor
        self.izquierda = None
        self.derecha = None


class ArbolBinario:
    def __init__(self):
        self.raiz = None

    def insertar(self, valor):
        if not self.raiz:
            self.raiz = NodoArbol(valor)
        else:
            self._insertar_recursivo(self.raiz, valor)

    def _insertar_recursivo(self, nodo, valor):
        if valor < nodo.valor:
            if nodo.izquierda:
                self._insertar_recursivo(nodo.izquierda, valor)
            else:
                nodo.izquierda = NodoArbol(valor)
        else:
            if nodo.derecha:
                self._insertar_recursivo(nodo.derecha, valor)
            else:
                nodo.derecha = NodoArbol(valor)

    def eliminar(self, valor):
        self.raiz = self._eliminar_recursivo(self.raiz, valor)

    def _eliminar_recursivo(self, nodo, valor):
        if not nodo:
            print("Valor no encontrado.")
            return nodo
        if valor < nodo.valor:
            nodo.izquierda = self._eliminar_recursivo(nodo.izquierda, valor)
        elif valor > nodo.valor:
            nodo.derecha = self._eliminar_recursivo(nodo.derecha, valor)
        else:
            if not nodo.izquierda:
                return nodo.derecha
            elif not nodo.derecha:
                return nodo.izquierda
            min_valor = self._min_valor(nodo.derecha)
            nodo.valor = min_valor
            nodo.derecha = self._eliminar_recursivo(nodo.derecha, min_valor)
        return nodo

    def _min_valor(self, nodo):
        actual = nodo
        while actual.izquierda:
            actual = actual.izquierda
        return actual.valor

    def mostrar(self):
        self._mostrar_recursivo(self.raiz)

    def _mostrar_recursivo(self, nodo, nivel=0):
        if nodo:
            self._mostrar_recursivo(nodo.derecha, nivel + 1)
            print("   " * nivel + str(nodo.valor))
            self._mostrar_recursivo(nodo.izquierda, nivel + 1)


# Menú principal
def main():
    lista = ListaEnlazada()
    cola = Cola()
    pila = Pila()
    arbol = ArbolBinario()

    while True:
        print("\n--- Menú ---")
        print("1. Lista Enlazada")
        print("2. Cola")
        print("3. Pila")
        print("4. Árbol Binario")
        print("5. Salir")
        opcion = input("Elige una opción: ")

        if opcion == "1":
            print("a. Insertar")
            print("b. Eliminar")
            print("c. Mostrar")
            subopcion = input("Elige una opción: ")
            if subopcion == "a":
                valor = input("Valor a insertar: ")
                lista.insertar(valor)
            elif subopcion == "b":
                valor = input("Valor a eliminar: ")
                lista.eliminar(valor)
            elif subopcion == "c":
                lista.mostrar()

        elif opcion == "2":
            print("a. Insertar")
            print("b. Eliminar")
            print("c. Mostrar")
            subopcion = input("Elige una opción: ")
            if subopcion == "a":
                valor = input("Valor a insertar: ")
                cola.insertar(valor)
            elif subopcion == "b":
                print("Elemento eliminado:", cola.eliminar())
            elif subopcion == "c":
                cola.mostrar()

        elif opcion == "3":
            print("a. Insertar")
            print("b. Eliminar")
            print("c. Mostrar")
            subopcion = input("Elige una opción: ")
            if subopcion == "a":
                valor = input("Valor a insertar: ")
                pila.insertar(valor)
            elif subopcion == "b":
                print("Elemento eliminado:", pila.eliminar())
            elif subopcion == "c":
                pila.mostrar()

        elif opcion == "4":
            print("a. Insertar")
            print("b. Eliminar")
            print("c. Mostrar")
            subopcion = input("Elige una opción: ")
            if subopcion == "a":
                valor = int(input("Valor a insertar: "))
                arbol.insertar(valor)
            elif subopcion == "b":
                valor = int(input("Valor a eliminar: "))
                arbol.eliminar(valor)
            elif subopcion == "c":
                arbol.mostrar()

        elif opcion == "5":
            print("Saliendo...")
            break

        else:
            print("Opción inválida.")


if __name__ == "__main__":
    main()